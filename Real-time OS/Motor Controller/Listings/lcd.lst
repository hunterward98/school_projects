


ARM Macro Assembler    Page 1 


    1 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
    2 00000000 400FE060 
                       SYSCTL_RCC_R
                               EQU              0x400FE060
    3 00000000 40004400 
                       GPIO_PORTA_DIR_R
                               EQU              0x40004400
    4 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
    5 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
    6 00000000 40006400 
                       GPIO_PORTC_DIR_R
                               EQU              0x40006400
    7 00000000 400063FC 
                       GPIO_PORTC_DATA_R
                               EQU              0x400063FC
    8 00000000 4000651C 
                       GPIO_PORTC_DEN_R
                               EQU              0x4000651C
    9 00000000         
   10 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   11 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   12 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   13 00000000         
   14 00000000         
   15 00000000         
   16 00000000         
   17 00000000                 THUMB
   18 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   19 00000000         
   20 00000000                 EXPORT           SYSCTL_RCGCGPIO_R
   21 00000000                 EXPORT           SYSCTL_RCC_R
   22 00000000                 EXPORT           GPIO_PORTA_DATA_R
   23 00000000         
   24 00000000         
   25 00000000                 EXPORT           Delay1ms
   26 00000000                 EXPORT           Set_Position
   27 00000000                 EXPORT           Display_Msg
   28 00000000                 EXPORT           Display_Char
   29 00000000                 EXPORT           Set_Blink_ON
   30 00000000                 EXPORT           Set_Blink_OFF
   31 00000000         ; EXPORT Init_Clock
   32 00000000                 EXPORT           Init_LCD_Ports
   33 00000000                 EXPORT           Init_LCD
   34 00000000         
   35 00000000         
   36 00000000         Init_LCD_Ports



ARM Macro Assembler    Page 2 


   37 00000000         ; Initialize PORTs A, C and E. Note: this initialization
                        uses an UNFRIENDLY code
   38 00000000 B50C            PUSH             {LR, R2, R3}
   39 00000002 F04F 0315       MOV              R3, #0x15   ; Activating the cl
                                                            ocks for the three 
                                                            ports.
   40 00000006 4A87            LDR              R2,=SYSCTL_RCGCGPIO_R
   41 00000008 6013            STR              R3, [R2]
   42 0000000A BF00            NOP
   43 0000000C BF00            NOP
   44 0000000E F04F 033C       MOV              R3, #0x3C   ; Pins PTA2-PTA5 ar
                                                            e outputs
   45 00000012 4A85            LDR              R2, =GPIO_PORTA_DIR_R
   46 00000014 6013            STR              R3, [R2]
   47 00000016 F04F 0340       MOV              R3, #0x40   ; Pin PC6 is output
                                                            
   48 0000001A 4A84            LDR              R2, =GPIO_PORTC_DIR_R
   49 0000001C 6013            STR              R3, [R2]
   50 0000001E F04F 0301       MOV              R3, #0x01   ; Pin PE0 is output
                                                            
   51 00000022 4A83            LDR              R2, =GPIO_PORTE_DIR_R
   52 00000024 6013            STR              R3, [R2]
   53 00000026         
   54 00000026 F04F 03FF       MOV              R3, #0xFF   ; PORTA's signals a
                                                            re digital
   55 0000002A 4A82            LDR              R2, =GPIO_PORTA_DEN_R
   56 0000002C 6013            STR              R3, [R2]
   57 0000002E 4A82            LDR              R2, =GPIO_PORTC_DEN_R ; PORTC's
                                                             signals are digita
                                                            l
   58 00000030 6013            STR              R3, [R2]
   59 00000032 4A82            LDR              R2, =GPIO_PORTE_DEN_R ; PORTC's
                                                             signals are digita
                                                            l
   60 00000034 6013            STR              R3, [R2]
   61 00000036 E8BD 400C       POP              {LR, R2, R3}
   62 0000003A 4770            BX               LR
   63 0000003C         
   64 0000003C         ; Data is pointed to by R0
   65 0000003C         Display_Msg
   66 0000003C B503            PUSH             {LR, R0, R1}
   67 0000003E 4601            MOV              R1, R0
   68 00000040         disp_again
   69 00000040 7808            LDRB             R0, [R1]    ; R1 <- ASCII data
   70 00000042 2800            CMP              R0, #0x00   ; check for the end
                                                             of the string
   71 00000044 D004            BEQ              disp_end
   72 00000046 F7FF FFFE       BL               Display_Char
   73 0000004A F101 0101       ADD              R1, R1, #1  ; increment R0
   74 0000004E E7F7            B                disp_again
   75 00000050         disp_end
   76 00000050 E8BD 4003       POP              {LR, R0, R1}
   77 00000054 4770            BX               LR
   78 00000056         
   79 00000056         ; Display_Char - writes an ASCII value in R0 to LCD
   80 00000056         
   81 00000056         Display_Char
   82 00000056 B503            PUSH             {LR, R1, R0}
   83 00000058 F000 F847       BL               SplitNum    ;



ARM Macro Assembler    Page 3 


   84 0000005C F000 F81B       BL               WriteData   ; write upper 4 bit
                                                            s of ASCII byte
   85 00000060 4608            MOV              R0, R1
   86 00000062 F000 F818       BL               WriteData   ; write lower 4 bit
                                                            s of ASCII byte
   87 00000066 F04F 0001       MOV              R0, #0x01
   88 0000006A F7FF FFFE       BL               Delay1ms    ; wait for 1ms
   89 0000006E E8BD 4003       POP              {LR, R1, R0}
   90 00000072 4770            BX               LR
   91 00000074         
   92 00000074         ; Set_Position - sets the position in R0 for displaying 
                       data in LCD
   93 00000074         
   94 00000074         Set_Position
   95 00000074 B503            PUSH             {LR, R1, R0}
   96 00000076 F040 0080       ORR              R0, #0x80   ; set b7 of R1
   97 0000007A F000 F836       BL               SplitNum
   98 0000007E F000 F81F       BL               WriteCMD    ; write upper 4 bit
                                                            s of the command
   99 00000082 4608            MOV              R0, R1
  100 00000084 F000 F81C       BL               WriteCMD    ; write lower 4 bit
                                                            s of the command
  101 00000088 F04F 0001       MOV              R0, #0x01
  102 0000008C F7FF FFFE       BL               Delay1ms    ; wait for 1ms
  103 00000090 E8BD 4003       POP              {LR, R1, R0}
  104 00000094 4770            BX               LR
  105 00000096         
  106 00000096         ; WriteData - sends a data (lower 4 bits) in R0 to LCD
  107 00000096         
  108 00000096         WriteData
  109 00000096 B503            PUSH             {LR, R1, R0}
  110 00000098 EA4F 0080       LSL              R0, R0, #2  ; data from bits 2 
                                                            - 5
  111 0000009C 4968            LDR              R1, =GPIO_PORTA_DATA_R
  112 0000009E 7008            STRB             R0, [R1]
  113 000000A0 4968            LDR              R1, =GPIO_PORTE_DATA_R
  114 000000A2 F04F 0001       MOV              R0, #0x01   ; Sending data
  115 000000A6 7008            STRB             R0, [R1]
  116 000000A8 F04F 0000       MOV              R0, #0x00   ; Enabling the LCD 
                                                            (falling edge)
  117 000000AC 4966            LDR              R1, =GPIO_PORTC_DATA_R
  118 000000AE 7008            STRB             R0, [R1]
  119 000000B0 BF00            NOP
  120 000000B2 BF00            NOP
  121 000000B4 F04F 0040       MOV              R0, #0x40   ; Raising the edge 
                                                            in preparation for 
                                                            the next write 
  122 000000B8 7008            STRB             R0, [R1]
  123 000000BA E8BD 4003       POP              {LR, R1,R0}
  124 000000BE 4770            BX               LR
  125 000000C0         
  126 000000C0         ; WriteCMD - sends a command (lower 4 bits) in R0 to LCD
                       
  127 000000C0         
  128 000000C0         WriteCMD
  129 000000C0 B503            PUSH             {LR, R1, R0}
  130 000000C2 EA4F 0080       LSL              R0, R0, #2  ; data from bits 2 
                                                            - 5
  131 000000C6 495E            LDR              R1, =GPIO_PORTA_DATA_R



ARM Macro Assembler    Page 4 


  132 000000C8 7008            STRB             R0, [R1]
  133 000000CA F04F 0000       MOV              R0, #0x00   ;  ; RS=0 for sendi
                                                            ng a command
  134 000000CE 495D            LDR              R1, =GPIO_PORTE_DATA_R
  135 000000D0 7008            STRB             R0, [R1]
  136 000000D2 F04F 0000       MOV              R0, #0x00   ; Enabling the LCD
  137 000000D6 495C            LDR              R1, =GPIO_PORTC_DATA_R
  138 000000D8 7008            STRB             R0, [R1]
  139 000000DA BF00            NOP
  140 000000DC BF00            NOP
  141 000000DE F04F 0040       MOV              R0, #0x40   ; Raising PC6
  142 000000E2 7008            STRB             R0, [R1]
  143 000000E4 E8BD 4003       POP              {LR, R1, R0}
  144 000000E8 4770            BX               LR
  145 000000EA         
  146 000000EA         ; SlipNum - separates hex numbers in R0
  147 000000EA         ;   R1 <- LS digit
  148 000000EA         ;   R0 <- MS digit
  149 000000EA         
  150 000000EA         SplitNum
  151 000000EA B500            PUSH             {LR}
  152 000000EC 4601            MOV              R1, R0
  153 000000EE F001 010F       AND              R1, #0x0F   ; mask the upper 4 
                                                            bits
  154 000000F2 EA4F 1010       LSR              R0, R0, #4
  155 000000F6 F85D EB04       POP              {LR}
  156 000000FA 4770            BX               LR
  157 000000FC         
  158 000000FC         ; Init_LCD - initializes LCD according to the initializi
                       ng sequence indicated
  159 000000FC         ;   by the manufacturer
  160 000000FC         
  161 000000FC         Init_LCD
  162 000000FC B503            PUSH             {LR, R1, R0}
  163 000000FE F04F 001E       MOV              R0, #30     ;
  164 00000102 F7FF FFFE       BL               Delay1ms    ; wait 30ms for LCD
                                                             to power up
  165 00000106         
  166 00000106         ; send byte 1 of code to LCD
  167 00000106 F04F 0030       MOV              R0, #0x30   ; R1 <- byte #1 of 
                                                            code: $30
  168 0000010A F7FF FFEE       BL               SplitNum    ;
  169 0000010E F7FF FFD7       BL               WriteCMD    ; write byte #1
  170 00000112 F04F 0005       MOV              R0, #5      ;
  171 00000116 F7FF FFFE       BL               Delay1ms    ; wait for 5 ms
  172 0000011A         
  173 0000011A         ; send byte 2 of code to LCD
  174 0000011A F04F 0030       MOV              R0, #0x30   ; R1 <- byte #2 of 
                                                            code: $30
  175 0000011E F7FF FFE4       BL               SplitNum    ;
  176 00000122 F7FF FFCD       BL               WriteCMD    ; write byte #2
  177 00000126 F04F 0001       MOV              R0, #1      ;
  178 0000012A F7FF FFFE       BL               Delay1ms    ; wait for 1ms
  179 0000012E         
  180 0000012E         ; send byte 3 of code to LCD
  181 0000012E F04F 0030       MOV              R0, #0x30   ; R1 <- byte #3 of 
                                                            code: $30
  182 00000132 F7FF FFDA       BL               SplitNum    ;
  183 00000136 F7FF FFC3       BL               WriteCMD    ; write byte #3



ARM Macro Assembler    Page 5 


  184 0000013A F04F 0001       MOV              R0, #1      ;
  185 0000013E F7FF FFFE       BL               Delay1ms    ; wait for 1ms
  186 00000142         
  187 00000142         ; send byte 4 of code to LCD
  188 00000142 F04F 0020       MOV              R0, #0x20   ; R1 <- byte #4 of 
                                                            code: $20
  189 00000146 F7FF FFD0       BL               SplitNum    ;
  190 0000014A F7FF FFB9       BL               WriteCMD    ; write byte #4
  191 0000014E F04F 0001       MOV              R0, #1      ;
  192 00000152 F7FF FFFE       BL               Delay1ms    ; wait for 1ms
  193 00000156         
  194 00000156         ; send byte 5 of code to LCD
  195 00000156 F04F 0028       MOV              R0, #0x28   ; R1 <- byte #5 of 
                                                            code: $28
  196 0000015A         ;  db5 = 1, db4 = 0 (DL = 0 - 4 bits), 
  197 0000015A         ;  db3 = 1 (N = 1 - 2 lines),
  198 0000015A         ;  db2 = 0 (F = 0 - 5x7 dots).
  199 0000015A F7FF FFC6       BL               SplitNum    ;
  200 0000015E F7FF FFAF       BL               WriteCMD    ; write upper 4 bit
                                                            s of byte #5
  201 00000162 468A            MOV              R10,R1
  202 00000164 F7FF FFAC       BL               WriteCMD    ; write lower 4 bit
                                                            s of byte #5
  203 00000168 F04F 0001       MOV              R0, #1      ;
  204 0000016C F7FF FFFE       BL               Delay1ms    ; wait for 1ms
  205 00000170         
  206 00000170         ; send byte 6 of code to LCD
  207 00000170 F04F 000C       MOV              R0, #0x0C   ; R1 <- byte #6 of 
                                                            code: $0C
  208 00000174         ;  db3 = 1, db2 = 1 (D = 1 - display ON)
  209 00000174         ;  db1 = 0 (C = 0 - cursor OFF)
  210 00000174         ;  db0 = 0 (B = 0 - blink OFF)
  211 00000174 F7FF FFB9       BL               SplitNum    ;
  212 00000178 F7FF FFA2       BL               WriteCMD    ; write upper 4 bit
                                                            s of byte #6
  213 0000017C 4608            MOV              R0,R1
  214 0000017E F7FF FF9F       BL               WriteCMD    ; write lower 4 bit
                                                            s of byte #6
  215 00000182 F04F 0001       MOV              R0, #1      ;
  216 00000186 F7FF FFFE       BL               Delay1ms    ; wait for 1ms
  217 0000018A         
  218 0000018A         ; send byte 7 of code to LCD
  219 0000018A F04F 0001       MOV              R0, #0x01   ; R1 <- byte #7 of 
                                                            code: $01
  220 0000018E         ;  db0 = 1 (clears display and returns
  221 0000018E         ; the cursor home).   
  222 0000018E F7FF FFAC       BL               SplitNum    ;
  223 00000192 F7FF FF95       BL               WriteCMD    ; write upper 4 bit
                                                            s of byte #8
  224 00000196 4608            MOV              R0,R1
  225 00000198 F7FF FF92       BL               WriteCMD    ; write lower 4 bit
                                                            s of byte #8
  226 0000019C F04F 0003       MOV              R0, #3      ;
  227 000001A0 F7FF FFFE       BL               Delay1ms    ; wait for 3ms
  228 000001A4         
  229 000001A4         ; send byte 8 of code to LCD
  230 000001A4 F04F 0006       MOV              R0, #0x06   ; R1 <- byte #8 of 
                                                            code: $06
  231 000001A8         ;  db2 = 1,



ARM Macro Assembler    Page 6 


  232 000001A8         ;  db1 = 1 (I/D = 1 - increment cursor)
  233 000001A8         ;  db0 = 0 (S = 0 - no display shift)
  234 000001A8 F7FF FF9F       BL               SplitNum    ;
  235 000001AC F7FF FF88       BL               WriteCMD    ; write upper 4 bit
                                                            s of byte #7
  236 000001B0 4608            MOV              R0,R1
  237 000001B2 F7FF FF85       BL               WriteCMD    ; write lower 4 bit
                                                            s of byte #7
  238 000001B6 F04F 0001       MOV              R0, #1      ;
  239 000001BA F7FF FFFE       BL               Delay1ms    ; wait for 1ms
  240 000001BE E8BD 4003       POP              {LR, R1, R0}
  241 000001C2 4770            BX               LR
  242 000001C4         
  243 000001C4         ; Subroutine Set_Blink_ON: sets the blink on at the char
                       acter indicated by R0
  244 000001C4         Set_Blink_ON
  245 000001C4 B503            PUSH             {LR, R1, R0}
  246 000001C6 F04F 000D       MOV              R0, #0x0D
  247 000001CA F7FF FF8E       BL               SplitNum
  248 000001CE F7FF FF77       BL               WriteCMD
  249 000001D2 4608            MOV              R0, R1
  250 000001D4 F7FF FF74       BL               WriteCMD
  251 000001D8 F04F 0001       MOV              R0, #0x01
  252 000001DC F7FF FFFE       BL               Delay1ms
  253 000001E0 E8BD 4003       POP              {LR, R1, R0}
  254 000001E4 4770            BX               LR
  255 000001E6         
  256 000001E6         ; Subroutine Set_Blink_OFF: sets the blink off 
  257 000001E6         Set_Blink_OFF
  258 000001E6 B503            PUSH             {LR, R1, R0}
  259 000001E8 F04F 000C       MOV              R0, #0x0C
  260 000001EC F7FF FF7D       BL               SplitNum
  261 000001F0 F7FF FF66       BL               WriteCMD
  262 000001F4 4608            MOV              R0, R1
  263 000001F6 F7FF FF63       BL               WriteCMD
  264 000001FA F04F 0001       MOV              R0, #0x01
  265 000001FE F7FF FFFE       BL               Delay1ms
  266 00000202 E8BD 4003       POP              {LR, R1, R0}
  267 00000206 4770            BX               LR
  268 00000208         
  269 00000208         ;Delay milliseconds
  270 00000208         Delay1ms
  271 00000208 B519            PUSH             {LR, R0, R3, R4}
  272 0000020A 0003            MOVS             R3, R0
  273 0000020C D100            BNE              L1          ; if n=0, return
  274 0000020E 4770            BX               LR          ; return
  275 00000210         
  276 00000210 F241 44D6 
                       L1      LDR              R4, =5334
  277 00000214         ; do inner loop 5336 times (16 MHz CPU clock)
  278 00000214 1E64    L2      SUBS             R4, R4,#1
  279 00000216 D1FD            BNE              L2
  280 00000218 1E5B            SUBS             R3, R3, #1
  281 0000021A D1F9            BNE              L1
  282 0000021C E8BD 4019       POP              {LR, R0, R3, R4}
  283 00000220 4770            BX               LR
  284 00000222         
  285 00000222                 END
              00 00 400FE608 



ARM Macro Assembler    Page 7 


              40004400 
              40006400 
              40024400 
              4000451C 
              4000651C 
              4002451C 
              400043FC 
              400243FC 
              400063FC 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\objects\lcd.d -o.\objects\lcd.o -I.\RTE\_Target_1 -IC:\Keil_v5\A
RM\PACK\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\
1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION
_VERSION SETA 523" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1"
 --list=.\listings\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 18 in file LCD.s
   Uses
      None
Comment: .text unused
Delay1ms 00000208

Symbol: Delay1ms
   Definitions
      At line 270 in file LCD.s
   Uses
      At line 25 in file LCD.s
      At line 88 in file LCD.s
      At line 102 in file LCD.s
      At line 164 in file LCD.s
      At line 171 in file LCD.s
      At line 178 in file LCD.s
      At line 185 in file LCD.s
      At line 192 in file LCD.s
      At line 204 in file LCD.s
      At line 216 in file LCD.s
      At line 227 in file LCD.s
      At line 239 in file LCD.s
      At line 252 in file LCD.s
      At line 265 in file LCD.s

Display_Char 00000056

Symbol: Display_Char
   Definitions
      At line 81 in file LCD.s
   Uses
      At line 28 in file LCD.s
      At line 72 in file LCD.s

Display_Msg 0000003C

Symbol: Display_Msg
   Definitions
      At line 65 in file LCD.s
   Uses
      At line 27 in file LCD.s
Comment: Display_Msg used once
Init_LCD 000000FC

Symbol: Init_LCD
   Definitions
      At line 161 in file LCD.s
   Uses
      At line 33 in file LCD.s
Comment: Init_LCD used once
Init_LCD_Ports 00000000

Symbol: Init_LCD_Ports
   Definitions
      At line 36 in file LCD.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 32 in file LCD.s
Comment: Init_LCD_Ports used once
L1 00000210

Symbol: L1
   Definitions
      At line 276 in file LCD.s
   Uses
      At line 273 in file LCD.s
      At line 281 in file LCD.s

L2 00000214

Symbol: L2
   Definitions
      At line 278 in file LCD.s
   Uses
      At line 279 in file LCD.s
Comment: L2 used once
Set_Blink_OFF 000001E6

Symbol: Set_Blink_OFF
   Definitions
      At line 257 in file LCD.s
   Uses
      At line 30 in file LCD.s
Comment: Set_Blink_OFF used once
Set_Blink_ON 000001C4

Symbol: Set_Blink_ON
   Definitions
      At line 244 in file LCD.s
   Uses
      At line 29 in file LCD.s
Comment: Set_Blink_ON used once
Set_Position 00000074

Symbol: Set_Position
   Definitions
      At line 94 in file LCD.s
   Uses
      At line 26 in file LCD.s
Comment: Set_Position used once
SplitNum 000000EA

Symbol: SplitNum
   Definitions
      At line 150 in file LCD.s
   Uses
      At line 83 in file LCD.s
      At line 97 in file LCD.s
      At line 168 in file LCD.s
      At line 175 in file LCD.s
      At line 182 in file LCD.s
      At line 189 in file LCD.s
      At line 199 in file LCD.s
      At line 211 in file LCD.s
      At line 222 in file LCD.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 234 in file LCD.s
      At line 247 in file LCD.s
      At line 260 in file LCD.s

WriteCMD 000000C0

Symbol: WriteCMD
   Definitions
      At line 128 in file LCD.s
   Uses
      At line 98 in file LCD.s
      At line 100 in file LCD.s
      At line 169 in file LCD.s
      At line 176 in file LCD.s
      At line 183 in file LCD.s
      At line 190 in file LCD.s
      At line 200 in file LCD.s
      At line 202 in file LCD.s
      At line 212 in file LCD.s
      At line 214 in file LCD.s
      At line 223 in file LCD.s
      At line 225 in file LCD.s
      At line 235 in file LCD.s
      At line 237 in file LCD.s
      At line 248 in file LCD.s
      At line 250 in file LCD.s
      At line 261 in file LCD.s
      At line 263 in file LCD.s

WriteData 00000096

Symbol: WriteData
   Definitions
      At line 108 in file LCD.s
   Uses
      At line 84 in file LCD.s
      At line 86 in file LCD.s

disp_again 00000040

Symbol: disp_again
   Definitions
      At line 68 in file LCD.s
   Uses
      At line 74 in file LCD.s
Comment: disp_again used once
disp_end 00000050

Symbol: disp_end
   Definitions
      At line 75 in file LCD.s
   Uses
      At line 71 in file LCD.s
Comment: disp_end used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 4 in file LCD.s
   Uses
      At line 22 in file LCD.s
      At line 111 in file LCD.s
      At line 131 in file LCD.s

GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 5 in file LCD.s
   Uses
      At line 55 in file LCD.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_DIR_R 40004400

Symbol: GPIO_PORTA_DIR_R
   Definitions
      At line 3 in file LCD.s
   Uses
      At line 45 in file LCD.s
Comment: GPIO_PORTA_DIR_R used once
GPIO_PORTC_DATA_R 400063FC

Symbol: GPIO_PORTC_DATA_R
   Definitions
      At line 7 in file LCD.s
   Uses
      At line 117 in file LCD.s
      At line 137 in file LCD.s

GPIO_PORTC_DEN_R 4000651C

Symbol: GPIO_PORTC_DEN_R
   Definitions
      At line 8 in file LCD.s
   Uses
      At line 57 in file LCD.s
Comment: GPIO_PORTC_DEN_R used once
GPIO_PORTC_DIR_R 40006400

Symbol: GPIO_PORTC_DIR_R
   Definitions
      At line 6 in file LCD.s
   Uses
      At line 48 in file LCD.s
Comment: GPIO_PORTC_DIR_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 11 in file LCD.s
   Uses
      At line 113 in file LCD.s
      At line 134 in file LCD.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 12 in file LCD.s
   Uses
      At line 59 in file LCD.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 10 in file LCD.s
   Uses
      At line 51 in file LCD.s
Comment: GPIO_PORTE_DIR_R used once
SYSCTL_RCC_R 400FE060

Symbol: SYSCTL_RCC_R
   Definitions
      At line 2 in file LCD.s
   Uses
      At line 21 in file LCD.s
Comment: SYSCTL_RCC_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 1 in file LCD.s
   Uses
      At line 20 in file LCD.s
      At line 40 in file LCD.s

11 symbols
363 symbols in table
