// OS functions pertaining to simple write-once file system
// John Tadrous
// August 9, 2020


#include "TM4C123GH6PM.h"
#include "tm4c123gh6pm_def.h"


uint32_t Disk_Start_Address=0x20000; // First address in the ROM
// goes up to 0x3FFFF

uint8_t	RAM_Directory[256];				// Directory loaded in RAM
uint8_t	RAM_FAT[256];							// FAT in RAM
uint8_t Access_FB;                // Access Feedback


void OS_FS_Init(void);
uint8_t OS_File_New(void);
uint8_t OS_File_Size(uint8_t);
uint8_t find_free_sector(void);
uint8_t last_sector(uint8_t);
void append_fat(uint8_t, uint8_t);
uint8_t OS_File_Read(uint8_t, uint8_t, uint8_t*);
uint8_t eDisk_WriteSector(uint8_t*, uint8_t);
uint8_t OS_File_Flush(void);
int Flash_Erase(uint32_t);
uint8_t OS_File_Format(void);

// OS_FS_Init()  Temporarily initialize RAM_Directory and RAM_FAT
void OS_FS_Init(void){
  int i;
  for(i=0; i<256 ; i++){
    RAM_Directory[i]=255;
    RAM_FAT[i]=255;
  }
}


//******** OS_File_New************* 
// Returns a file number of a new file for writing 
// Inputs: none 
// Outputs: number of a new file 
// Errors: return 255 on failure or disk full
uint8_t OS_File_New(void){
	// first check if disk is full
	if (find_free_sector() != 0xFF)
	{
		uint8_t fileNum = 0;
		int i  = 0;
		for (i = 0; i < 255; i++)
		{
			if (RAM_Directory[fileNum] == 0xFF)
				return fileNum;
			fileNum++;
		}
	}
	else
		return 0xFF;
}


//******** OS_File_Size************* 
// Check the size of this file 
// Inputs: num, 8-bit file number, 0 to 254 
// Outputs: 0 if empty, otherwise the number of sectors 
// Errors: none 
uint8_t OS_File_Size(uint8_t num){
	uint8_t fileCount = 1;
	if (RAM_Directory[num] == 0xFF)
		return 0;
	
	uint8_t loc = num;
	while (RAM_FAT[loc] != 0xFF)
	{
		fileCount++;
		loc = RAM_FAT[loc];
	}
	return fileCount;
}

//******** OS_File_Append************* 
// Save 512 bytes into the file 
// Inputs: num, 8-bit file number, 0 to 254 
// buf, pointer to 512 bytes of data 
// Outputs: 0 if successful 
// Errors: 255 on failure or disk full 
uint8_t OS_File_Append(uint8_t num, uint8_t buf[512]){
	uint8_t n;
	
	n = find_free_sector();
	
	if (n == 0xFF) {
		return 0xFF;
	} else {
		eDisk_WriteSector(buf, n);
		append_fat(num, n);
		return 0;
	}
}

// Helper function find_free_sector returns the logical 
// address of the first free sector
uint8_t find_free_sector(void){
	int  i = 0;
	int fs = -1;
	int ls = 0;
	
	for (i = 0; i < 255; i++)
	{
		ls = last_sector(RAM_Directory[i]);
		if (ls == 255)
			return fs + 1;
		else
			fs = (fs > ls) ? fs : ls;
	}
	return 0xFF; // indicates full
}

// Helper function last_sector returns the logical address
// of the last sector assigned to the file whose number is 'start'
uint8_t last_sector(uint8_t start){
	uint8_t m = 0;
	
	if (start == 255)
		return 0xFF;
	
	while (start != 255) {
		m = RAM_FAT[start];
		
		if (m == 255)
			return start;
		else
			start = m;
	}
}


// Helper function append_fat() modifies the FAT to append 
// the sector with logical address n to the sectors of file
// num
void append_fat(uint8_t num, uint8_t n){
	int i, m;
	
	i = RAM_Directory[num];
	if (i == 255) {
		RAM_Directory[num] = n;
		return;
	}
	
	while(i != 255) {
		m = RAM_FAT[i];
		if (m == 255) {
			RAM_FAT[i] = n;
			return;
		} else {
			i = m;
		}
	}
}


// eDisk_WriteSector
// input: pointer to a 512-byte data buffer in RAM buf[512],
//        sector logical address n
// output: 0 if no error, 1 if error
// use the Flash_Write function
uint8_t eDisk_WriteSector(uint8_t buf[512], uint8_t n){
	int i, write_status;
	uint32_t address;
	uint32_t sector_offset;
  address = 0x00020000; // start of disk
	
	for (i = 0; i < 128; i++) {
		sector_offset = n * 0x200; // may be 0x200
		uint32_t dataWord = 0;
		int j = 0;
		for (j = 3; j >= 0; j--)
		{	
			if (j == 0)
				dataWord += buf[i*4 + j];
			else
				dataWord = dataWord + buf[i*4 + j] << 8;
		}
		write_status = Flash_Write(address + sector_offset + i*4, dataWord);
		if (write_status == 1)
			return 1;
	}
	return 0;
}


//******** OS_File_Read************* 
// Read 512 bytes from the file 
// Inputs: num, 8-bit file number, 0 to 254 
//         location, order of the sector in the file, 0 to 254 
//         buf, pointer to 512 empty spaces in RAM 
// Outputs: 0 if successful 
// Errors: 255 on failure because no data 
uint8_t OS_File_Read( uint8_t num, // file name
											uint8_t location, // sector
											uint8_t buf[512]){ // where we put file in RAM
	// if location == 1, it's the second sector of file "num"
	
	uint8_t count = 1; // assume at least 1 sector if a file exists
	uint32_t DataWord = 0;
	uint32_t tmpData = 0;
	// find physical address using logical address
	uint32_t addr = RAM_Directory[num];
	if (addr == 0xFF)
		return 0xFF;
	while (addr != 0xFF)
	{
		addr = RAM_FAT[addr];
		count++;

		if (count > location) // sector does not exist
			return 0xFF;
	}
	addr = 0x20000 + (addr * 0x200);
	
	int i, j;
	for (i = 0; i < 128; i++)
	{
		ReadWord(DataWord, addr);
		addr += 4;
		for (j = 3; j >= 0; j--)
		{
			uint32_t tmp = DataWord;
			buf[i*4 + j] = tmp >> 8 * j;
		}
	}
	
	return 0;
}

//******** OS_File_Format************* 
// Erase all files and all data 
// Inputs: none 
// Outputs: 0 if success 
// Errors: 255 on disk write failure 
uint8_t OS_File_Format(void){
  uint32_t address;
	int error;
	
  address = 0x00020000; // start of disk
  while( address <= 0x00040000){
    error = Flash_Erase(address); // erase 1k block
    address = address + 1024;
  }
	return error ? 0xFF : error;
}

//******** OS_File_Flush************* 
// Update working buffers onto the disk 
// Power can be removed after calling flush 
// Inputs: none 
// Outputs: 0 if success 
// Errors: 255 on disk write failure 
uint8_t OS_File_Flush(void){
	uint8_t error1, error2;
	int	erase_FB;
	uint8_t firstSector[512]; // stores 2nd to last sector temporarily
	uint8_t tmp_buf[512]; // used for writing Directory and FAT	
	uint32_t addr = 0x3FC00; // address of second to last sector
	uint32_t erase_addr = 0x3FC00;
	uint32_t DataWord;
	int i, j;
	
	
	for (i = 0; i < 128; i++)
	{
		ReadWord(DataWord, addr);
		addr += 4;
		for (j = 3; j >= 0; j--)
		{
			uint32_t tmp = DataWord;
			firstSector[i*4 + j] = tmp >> 8 * j;
		}
	}
	

	erase_FB = Flash_Erase(erase_addr); // erase second to last and last sector

	// now we write our last two sectors again
	for (i = 0; i < 512; i++) {
		if (i < 256)
			tmp_buf[i] = RAM_Directory[i];
		else
			tmp_buf[i] = RAM_FAT[i - 256];
	}

	error1 = eDisk_WriteSector(firstSector, 254);
	error2 = eDisk_WriteSector(tmp_buf, 255);
	
	
	return error1 || error2 || erase_FB;
}


